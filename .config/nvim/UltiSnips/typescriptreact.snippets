global !p

import subprocess
import datetime

def get_branch_name():
  try:
    branch_name =subprocess.check_output(['git', 'rev-parse', '--abbrev-ref', 'HEAD']).strip().decode('utf-8')
    return "-".join(branch_name.split('-', 2)[:2])
  except:
    return "no-branch"



def debug(text, on = False):
	if on:
		print(text)

def has_lineage(lineage = [], row_delta = 0, col_delta = 0, debug_text = ""):
	debug('====================================', on = debug_text != "")
	debug(debug_text, on = debug_text != "")
	debug(datetime.datetime.now(), on = debug_text != "")



	lineage_string = ','.join(f'"{l}"' for l in lineage )
	debug(lineage_string, on = debug_text != "")

	command = f"HasNodeLineage([{lineage_string}],line('.') + {row_delta},col('.') + {col_delta})"
	debug(command, on = debug_text != "")

	result = vim.eval(command)
	debug(result, on = debug_text != "")

	debug('====================================', on = debug_text != "")


	return result

def previous_ast_node_matching_any(index = 0, names = []):
   result = vim.eval("TreesitterNode(line('.'),col('.') - 1)")
   if len(result) > index:
	   if result[index] in names:
		   return True
   return False


def next_ast_node_matching_any(index = 0, names = []):
    result = vim.eval("TreesitterNode(line('.'),col('.') + 1)")
    if len(result) > index:
        if result[index] in names:
            return True
    return False


def ast_node_matching_any(index = 0, names = []):
    result = vim.eval("TreesitterNode(line('.'),col('.'))")
    if len(result) > index:
        if result[index] in names:
            return True
    return False


def get_ast_node(index = 0):
	result = vim.eval("TreesitterNode(line('.'),col('.'))")

	if len(result) > index:
		return result[index]

	return ""


def previous_check_ast_for():
	result = vim.eval("TreesitterNode(line('.'),col('.') - 1)")

	return result



def check_ast_for():
   result = vim.eval("TreesitterNode(line('.'),col('.'))")

   return result
endglobal




context "has_lineage(['jsx_element']) or has_lineage(['jsx_text'])"
snippet if "If jsx" Ae
<If condition={$1}>
	{$2}
</If>
endsnippet




context "has_lineage(['statement_block'])"
snippet mm "useMemo" Ae
const $1 = useMemo(() => {
	$3
}, [$2])
$0
endsnippet


context "has_lineage(['program'])"
snippet t "type" Aeb
type $1 = {
  $2
}
$0
endsnippet



context "has_lineage(['identifier', 'ERROR', 'import_statement', 'program'])"
snippet * "namespac imports" Ae
* as $1	
endsnippet


context "has_lineage(['import_statement', 'program'])"
snippet * "namespac imports" Ae
* as $1	
endsnippet



context "has_lineage(['jsx_opening_element', 'jsx_element'])"
snippet { "jsx" Aie
{ $1 }$0
endsnippet


context "has_lineage(['jsx_self_closing_element', 'jsx_element'])"
snippet { "jsx" Ae
{ $1 }
endsnippet

context "has_lineage(['import_statement', 'program'])"
snippet { "named imports" Ae
{ $1 }
endsnippet


context "previous_ast_node_matching_any(0,['arguments', 'binary_expression', 'parenthesized_expression', 'if_statement', 'jsx_expression', 'ternary_expression', 'member_expression'])"
snippet and "and" Ae
&& $1
endsnippet


context "ast_node_matching_any(0,['arguments', 'binary_expression', 'parenthesized_expression', 'if_statement', 'jsx_expression', 'ternary_expression'])"
snippet or "or" Awe
|| $1
endsnippet

context "get_ast_node(0) == 'arguments' or check_ast_for()[0] =='parenthesized_expression'"
snippet or "or" Abe
|| $1
endsnippet



context "ast_node_matching_any(0, ['jsx_opening_element']) and previous_ast_node_matching_any(0, ['jsx_opening_element'])"
snippet fn "function" Aie
$1={($2) => {
	${3:${VISUAL}}
}}
$0
endsnippet


context "ast_node_matching_any(0, ['jsx_expression', 'jsx_opening_element']) and previous_ast_node_matching_any(0, ['jsx_expression'])"
snippet fn "function" Aie
($1) => {
  ${2:${VISUAL}}
}
endsnippet



context "has_lineage(['formal_parameters', 'arrow_function'])"
snippet { "arguments" Aie
{ 
  $1,
}
endsnippet

context "has_lineage(['jsx_expression', 'jsx_attribute'])"
snippet { "object" Aie
{
  $1,
}
endsnippet


context "ast_node_matching_any(0, ['jsx_expression']) or previous_ast_node_matching_any(0, ['arguments'])"
snippet [ "array" Aie
[ 
  $1,
],
endsnippet


context "check_ast_for()[0] == 'jsx_expression'"
snippet ` "backticks" Aie
`$1`
endsnippet



context "ast_node_matching_any(0,['jsx_expression','jsx_closing_element', 'binary_expression','ERROR'])"
snippet ' "single quote" Awe
'$1'$0
endsnippet


context "ast_node_matching_any(0,['jsx_expression','jsx_closing_element','binary_expression','ERROR','parenthesized_expression', 'argument', 'if_statement', 'ternary_expression'])"
snippet " "double quote" Aie
"$1"$0
endsnippet


context "previous_ast_node_matching_any(0,['jsx_self_closing_element','jsx_opening_element','jsx_closing_element' 'jsx_element'])"
snippet = "function" Awe
$1={$2}
$0
endsnippet


context "ast_node_matching_any(0,['jsx_self_closing_element','jsx_opening_element', 'jsx_element', 'jsx_text'])"
snippet " "function" Awe
"$1"$0
endsnippet


context "previous_check_ast_for()[0] == 'jsx_self_closing_element' or previous_check_ast_for()[0] == 'jsx_opening_element'"
snippet "=" "function" Abe
$1={$2}$0
endsnippet


context "check_ast_for()[0] == 'jsx_self_closing_element'"
snippet "fn" "function" Abe
$1={($2) => {
	${3:${VISUAL}}
}}
$0
endsnippet



context "ast_node_matching_any(0, ['variable_declarator']) "
snippet { "object" Aie
{
	$1,
}
$0
endsnippet


context "ast_node_matching_any(0, ['variable_declarator']) "
snippet [ "array" Aie
[
  $1,
]
$0
endsnippet


context "ast_node_matching_any(0, ['variable_declarator']) "
snippet ' "single quote" Aie
'$1'$0
endsnippet


context "ast_node_matching_any(0, ['variable_declarator']) "
snippet " "double quote" Aie
"$1"$0
endsnippet


context "check_ast_for()[0] == 'variable_declarator'"
snippet "fn" "function" Aie
($2) => {
  ${3:${VISUAL}}
}
endsnippet


context "check_ast_for()[0] == 'statement_block'"
snippet "return fn" "function" Ae
return ($2) => {
	${3:${VISUAL}}
}
endsnippet


context "ast_node_matching_any(0, ['statement_block', 'program'])"
snippet ? "ternary" Abe
const $1 = $2 ? $3 : $4
$0
endsnippet


context "ast_node_matching_any(0, ['statement_block', 'program'])"
snippet ? "ternary" Abe
const $1 = $2 ? $3 : $4
$0
endsnippet


context "check_ast_for()[0] == 'statement_block' or check_ast_for()[0] == 'program'"
snippet fn "function" Abe
const $1 = ($2) => {
	${3:${VISUAL}}
}
endsnippet


context "check_ast_for()[0] == 'object_pattern'"
snippet ' "function" Abe
$1: '$2',
$0
endsnippet


context "check_ast_for()[0] == 'array' or check_ast_for()[0] == 'array_pattern'"
snippet fn "function" Abe
($1) => {
  ${2:${VISUAL}}
},
$0
endsnippet


context "check_ast_for()[0] == 'array' or check_ast_for()[0] == 'array_pattern'"
snippet { "object" Abe
{ 
  $1 
},
$0
endsnippet



context "check_ast_for()[0] == 'array' or check_ast_for()[0] == 'array_pattern'"
snippet [ "array" Abe
[
  $1 
],
$0
endsnippet


context "check_ast_for()[0] == 'array' or check_ast_for()[0] == 'array_pattern'"
snippet ` "backticks" Abe
`$1`,
$0
endsnippet


context "ast_node_matching_any(0, ['array', 'array_pattern']) or previous_ast_node_matching_any(0, ['array', 'array_pattern'])"
snippet " "double quote" Awe
"$1",
$0
endsnippet


context "check_ast_for()[0] == 'array' or check_ast_for()[0] == 'array_pattern'"
snippet "',*" "single quote" Abre
'$1'asdfs,
$0
endsnippet


context "check_ast_for()[0] == 'object'"
snippet ? "function" Abe
$1: ($2) ? $3 : $4,
$0
endsnippet


context "check_ast_for()[0] == 'object'"
snippet ' "function" Abe
$1: '$2',
$0
endsnippet


context "check_ast_for()[0] == 'object'"
snippet fn "function" Abe
$1: ($2) => {
  ${3:${VISUAL}}
},$0
endsnippet



context "previous_ast_node_matching_any(0, ['formal_parameters'])"
snippet ' "single quote" Aie
'$1'$0
endsnippet


context "previous_ast_node_matching_any(0, ['arguments'])"
snippet ' "single quote" Aie
'$1',$0
endsnippet


context "previous_ast_node_matching_any(0, ['arguments'])"
snippet ` "backticks" Aie
`$1`,$0
endsnippet



context "check_ast_for()[0] == 'arguments' and previous_check_ast_for()[0] == 'identifier'"
snippet [ "prop" Aie
[$1]$0
endsnippet


context "has_lineage(['type_identifier', 'type_annotation'], 0, -1)"
snippet [ "type" Aie
[$1]$0
endsnippet



context "ast_node_matching_any(0,['arguments']) or previous_ast_node_matching_any(0,['arguments'])"
snippet [ "array" Aie
[
  $1,
],$0
endsnippet


context "has_lineage(['arguments', 'call_expression'])"
snippet fn "function" Aie
($2) => {
  ${3:${VISUAL}}
},
endsnippet



context "check_ast_for()[0] == 'object_pattern'"
snippet { "object " Abe
$1: {
	$2
},
$3
endsnippet


context "check_ast_for()[0] == 'object'"
snippet { "object " Awie
$1: {
  $2
},
$3
endsnippet


context "check_ast_for()[0] == 'object_pattern'"
snippet [ "nested array"  Abe
$1 : [
	$2
],
$0
endsnippet


context "check_ast_for()[0] == 'object'"
snippet [ "nested array"  Ae
$1 : [
  $2
],
$0
endsnippet


context "check_ast_for()[0] == 'pair'"
snippet [ "key"  Abe
[$1]
endsnippet


context "check_ast_for()[0] == 'object_pattern' and check_ast_for()[1] != 'pair'"
snippet " "nested double quote"  Abe
$1: "$2",
$0
endsnippet


context "check_ast_for()[0] == 'object' and check_ast_for()[1] != 'pair'"
snippet ` "nested backticks"  Abe
$1: \`$2\`,
endsnippet


context "check_ast_for()[0] == 'object' and check_ast_for()[1] != 'pair'"
snippet " "nested double quote"  Abe
$1: "$2",
$0
endsnippet


context "check_ast_for()[0] == 'object_pattern'"
snippet fn "function in an object"  Abiwe
$1: () => {
  $2
},
$3
endsnippet


context "check_ast_for()[0] == 'object_pattern'"
snippet = "default value"  Aie
$1 = $2,
$0
endsnippet


context "check_ast_for()[0] == 'formal_parameters'"
snippet { "destructure function arguments"  Aie
{
  $1
}
endsnippet


context "check_ast_for()[0] == 'program' or (check_ast_for()[1] == 'program' and check_ast_for()[1] == 'ERROR') or check_ast_for()[0] == 'statement_block'"
snippet { "object in function"  Abe
const $1 = {
  $2
}
$0
endsnippet


context "ast_node_matching_any(0, ['program', 'statement_block'])"
snippet ' "single quote" Abe
const $1 = '$2'
endsnippet



context "previous_ast_node_matching_any(0, ['formal_parameters'])"
snippet " "double quote" Aie
"$1"
endsnippet

context "previous_ast_node_matching_any(0, ['arguments'])"
snippet " "double quote" Aie
"$1",
endsnippet


context "ast_node_matching_any(0, ['program', 'statement_block'])"
snippet " "double quote" Abe
const $1 = "$2"
endsnippet


context "ast_node_matching_any(0, ['program', 'statement_block'])"
snippet [ "array in function" Abe
const $1 = [
	$2,
]
$0
endsnippet


context "check_ast_for()[0] == 'program'"
snippet in "interface" Abe
interface $1 {
  $2: $3,
  $4
}
$0
endsnippet


context "check_ast_for()[0] == 'program'"
snippet < "angle brace" Abe
<$1>
$0
endsnippet


context "check_ast_for()[0] == 'jsx_element'"
snippet < "jsx" Abe
<$1 $2 >
  $3
</$1>
$0
endsnippet


context "check_ast_for()[0] == 'statement_block'"
snippet < "jsx" Abe
return (<$1>
  $2
</$1>)
$0
endsnippet


context "check_ast_for()[0] == 'object_type'"
snippet : "type declaration " Abe
$1:$2,
$0
endsnippet





context "check_ast_for()[0] == 'program' or check_ast_for()[0] =='statement_block'"
snippet if "IF"  Abe
if ($1) {
	$2

}
$3
endsnippet

context "check_ast_for()[0] == 'statement_block' and (ast_node_matching_any(1,['arrow_function', 'function','function_declaration']))"
snippet um "useMutation"
const [$1Mutation, { data, loading, error }] = useMutation($2, {
		...toastHandler({
		success: '$3',
		failure: "$4",
	}),
})
$0
endsnippet


context "check_ast_for()[0] == 'statement_block' and (ast_node_matching_any(1,['arrow_function', 'function','function_declaration']))"
snippet uh "use hook" Abe
const $1 = use$2($3)$0
endsnippet

context "check_ast_for()[0] == 'statement_block' and (ast_node_matching_any(1,['arrow_function', 'function','function_declaration']))"
snippet ugs "global state" Abe
const $1 = useSelector($2)$0
endsnippet


context "check_ast_for()[0] == 'statement_block' and (ast_node_matching_any(1,['arrow_function', 'function','function_declaration']))"
snippet uM "useMemo" Abe
const $3 = useMemo(() => {
		$2
		}, [$1])
endsnippet


context "check_ast_for()[0] == 'statement_block' and (ast_node_matching_any(1,['arrow_function', 'function','function_declaration']))"
snippet uE "useEffect" Abe
useEffect(() => {
	$2
}, [$1])
endsnippet


context "check_ast_for()[0] == 'statement_block' and (ast_node_matching_any(1,['arrow_function', 'function','function_declaration']))"
snippet uS "local state" Abe
const [$1, set`!p snip.rv=(t[1][0].upper()+t[1][1:] if (len(t[1]) > 0) else '')`] = useState($3)$0
endsnippet


context "check_ast_for()[0] == 'statement_block' and (ast_node_matching_any(1,['arrow_function', 'function','function_declaration']))"
snippet uc "useCallback" Abe
const $1 = useCallback(${2:fn,} [$3])
$0
endsnippet

context "check_ast_for()[0] == 'statement_block' and (ast_node_matching_any(1,['arrow_function', 'function','function_declaration']))"
snippet ue "useEffect" Abe
useEffect(() => {
	$2
}, [$1])
$0
endsnippet




context "check_ast_for()[0] == 'statement_block' and (ast_node_matching_any(1,['arrow_function', 'function','function_declaration']))"
snippet rr "return" Abe
return $0
endsnippet




context "previous_ast_node_matching_any(0, ['arguments'])"
snippet { "object" Aie
{
	$1
},
endsnippet


context "check_ast_for()[0] == 'statement_block' and (ast_node_matching_any(1,['arrow_function', 'function','function_declaration']))"
snippet { "object" Awe
{
  $1
}
endsnippet





context "check_ast_for()[0] == 'jsx_text'"
snippet { "fragment" Abie
{$1}
$0
endsnippet


context "check_ast_for()[0] == 'jsx_text'"
snippet << "fragment" Abie
<>
  $1
</>
$0
endsnippet


context "check_ast_for()[0] == 'jsx_text'"
snippet page "return object" Abie
<Page>
  $1
</Page>
$0
endsnippet


context "check_ast_for()[0] == 'jsx_text'"
snippet form "return object" Abie
<form>
  $1
</form>
$0
endsnippet


context "check_ast_for()[0] == 'jsx_text'"
snippet col "return object" Abie
<Column>
  $1
</Column>
$0
endsnippet


context "check_ast_for()[0] == 'jsx_text'"
snippet row "return object" Abie
<Row>
  $1
</Row>
$0
endsnippet



context "check_ast_for()[0] == 'jsx_text'"
snippet span "return object" Abie
<span>
  $1
</span>
$0
endsnippet


context "check_ast_for()[0] == 'jsx_text'"
snippet div "return object" Abie
<div>
  $1
</div>
$0
endsnippet








snippet oc "onClick"
onClick={$1}$0
endsnippet

snippet S. "Styles" A
Styles.$1
endsnippet

context "check_ast_for()[0] == 'jsx_opening_element'"
snippet cn "classname" Ai
className={${1:Styles.}} $2
endsnippet
snippet ).ca "catch" Ai
).catch((err) => {
	console.error(err)
});

$0
endsnippet

snippet .th "then" Ai
.then((${1:res}) => {
	$2
})$0
endsnippet





priority 1

snippet cc "constant" Ab
const $1 = ${2:${VISUAL}}
$0
endsnippet

snippet "^im" "import" Ar
import $2 from '$1'
endsnippet







snippet i "import"
import $2 from "$1"
endsnippet


	
snippet clv "console log value" Ai
console.debug("`!p snip.rv=get_branch_name()`", "$1", $1)
endsnippet


snippet clt "console log test"
console.log('test')
endsnippet
