global !p
import subprocess

import datetime


def get_branch_name():
	try:
		branch_name = subprocess.check_output(['git', 'rev-parse', '--abbrev-ref', 'HEAD']).strip().decode('utf-8')
		return "-".join(branch_name.split('-', 2)[:2])
	except:
		return "no-branch"


def debug(text, on = False):
  if on:
    print(text)

def has_lineage(lineage = [], row_delta = 0, col_delta = 0, debug_text = ""):
		debug('====================================', on = debug_text != "")
		debug(debug_text, on = debug_text != "")
		debug(datetime.datetime.now(), on = debug_text != "")



		lineage_string = ','.join(f'"{l}"' for l in lineage )
		debug(lineage_string, on = debug_text != "")

		command = f"HasNodeLineage([{lineage_string}],line('.') + {row_delta},col('.') + {col_delta})"
		debug(command, on = debug_text != "")

		result = vim.eval(command)
		debug(result, on = debug_text != "")

		debug('====================================', on = debug_text != "")


		return result



def ast_node_matching_any(index = 0, names = []):
    result = vim.eval("TreesitterNode('','')")
    print(result)
    if len(result) > index:
        if result[index] in names:
            return True
    return False


  
def get_ast_node(index = 0):
   result = vim.eval("TreesitterNode('','')")

   if len(result) > index:
     return result[index]

   return ""

def check_ast_for():
   result = vim.eval("TreesitterNode('','')")

   return result
endglobal


context "ast_node_matching_any(0, ['arguments', 'parenthesized_expression', 'binary_expression', 'ERROR'])"
snippet ' "function" Aie
'$1'$0
endsnippet


context "check_ast_for()[0] == 'statement_block' or check_ast_for()[0] == 'program'"
snippet fn "function" Abe
const $1 = ($2) => {
	${3:${VISUAL}}
}
endsnippet


context "check_ast_for()[0] == 'object'"
snippet fn "function" Abe
$1: ($2) => {
  ${3:${VISUAL}}
},
endsnippet



context "ast_node_matching_any(0, ['arguments', 'parenthesized_expression','binary_expression', 'if_statement'])"
snippet and "and" Aie
&& $1
endsnippet


context "ast_node_matching_any(0, ['arguments', 'parenthesized_expression','binary_expression', 'if_statement'])"
snippet or "or" Awe
|| $1
endsnippet

context "ast_node_matching_any(0, ['arguments', 'parenthesized_expression','binary_expression', 'if_statement'])"
snippet or "or" Abe
|| $1
endsnippet

context "get_ast_node(0) == 'arguments' or check_ast_for()[0] == 'formal_parameters'"
snippet fn "function" Aie
($1) => {
  $2
},
$0
endsnippet



context "has_lineage(['arguments', 'call_expression'])"
snippet { "object argument" Aie
{
  $1
},$3
endsnippet


context "check_ast_for()[0] == 'import_statement'"
snippet { "import statement" Ae
{$1}$3
endsnippet



context "check_ast_for()[0] == 'object'"
snippet { "object " Abe
$1: {
  $2

},
$3
endsnippet

context "has_lineage(['parenthesized_expression', 'if_statement'], debug_text='nested_array')"
snippet [ "nested array"  Aie
[]$0
endsnippet


context "check_ast_for()[0] == 'object' and check_ast_for()[1] != 'pair'"
snippet [ "nested array"  Ae
$1 : [
  $2
],
$0
endsnippet


context "check_ast_for()[0] == 'object'"
snippet " "nested string"  Ae
$1: "$2",
$0
endsnippet


context "check_ast_for()[0] == 'program' or check_ast_for()[0] == 'statement_block'"
snippet { "object in function"  Abe
const $1 = {
  $2
}
$0
endsnippet


context "ast_node_matching_any(0, ['program', 'statement_block'])"
snippet ' "single quote string" Abe
const $1 = '$2'
endsnippet


context "check_ast_for()[0] == 'program' or check_ast_for()[0] == 'statement_block'"

snippet " "string" Abe
const $1 = "$2"
endsnippet


context "check_ast_for()[0] == 'program' or check_ast_for()[0] == 'statement_block'"

snippet [ "array in function" Abe
const $1 = [
$2,
]
$0
endsnippet


context "check_ast_for()[0] == 'program' or check_ast_for()[0] == 'statement_block'"

snippet in "interface" Abe
interface $1 {
  $2: $3,
  $4
}
$0
endsnippet


context "check_ast_for()[0] == 'program' or check_ast_for()[0] == 'statement_block'"

snippet < "angle brace" Abe
<$1>
$0
endsnippet


context "check_ast_for()[0] == 'statement_block'"
snippet < "jsx" Abe
return (<$1>
  $2
</$1>)
$0
endsnippet


context "check_ast_for()[0] == 'object_type'"
snippet : "type declaration " Abe
$1:$2,
$0
endsnippet





context "ast_node_matching_any(0, ['program', 'statement_block', 'switch_case'])"
snippet if "IF"  Abe
if ($1) {
	$2

}
$3
endsnippet

context "check_ast_for()[0] == 'statement_block' and (check_ast_for()[1] =='arrow_function' or check_ast_for()[1] == 'function')"
snippet um "useMutation"
const [$1Mutation, { data, loading, error }] = useMutation($2, {
		...toastHandler({
		success: '$3',
		failure: "$4",
	}),
})
$0
endsnippet


context "check_ast_for()[0] == 'statement_block' and (check_ast_for()[1] =='arrow_function' or check_ast_for()[1] == 'function')"
snippet uh "use hook" Abe
const $1 = use$2($3)$0
endsnippet

context "check_ast_for()[0] == 'statement_block' and (check_ast_for()[1] =='arrow_function' or check_ast_for()[1] == 'function')"
snippet ugs "global state" Abe
const $1 = useSelector($2)$0
endsnippet


context "check_ast_for()[0] == 'statement_block' and (check_ast_for()[1] =='arrow_function' or check_ast_for()[1] == 'function')"
snippet uS "local state" Abe
const [$1, $2] = React.useState($3)$0
endsnippet

context "check_ast_for()[0] == 'statement_block' and (check_ast_for()[1] =='arrow_function' or check_ast_for()[1] == 'function')"
snippet uE "useEffect" Abe
useEffect(() => {
    $2
}, [$1])
$0
endsnippet




context "check_ast_for()[0] == 'statement_block' or (check_ast_for()[1] =='arrow_function' or check_ast_for()[1] == 'function')"
snippet rr "return" Abe
return $0
endsnippet


context "check_ast_for()[0] == 'statement_block' and (check_ast_for()[1] =='arrow_function' or check_ast_for()[1] == 'function')"
snippet ro "return object" Abe
return {
  $1
}
endsnippet



snippet oc "onClick"
onClick={$1}$0
endsnippet

snippet S. "Styles" A
Styles.$1
endsnippet

snippet ).ca "catch" Ai
).catch((err) => {
    console.error(err)
});

$0
endsnippet

snippet .th "then" Ai
.then((${1:res}) => {
    $2
})$0
endsnippet





priority 1

snippet cc "constant" Ab
const $1 = ${2:${VISUAL}}
$0
endsnippet

snippet "^im" "import" Ar
import $2 from '$1'
endsnippet







snippet i "import"
import $2 from "$1"
endsnippet


snippet cle "console log groupEnd" Aib
console.groupEnd()
endsnippet

snippet clg "console log group" Ai
console.group("$1")
endsnippet

	

snippet clv "console log value" Ai
console.debug("`!p snip.rv=get_branch_name()`", "$1", $1)
endsnippet


snippet clt "console log test"
console.log('test')
endsnippet
